def findPaths(m, n, N, i, j):
    # Initialize a 3D array dp to store the number of ways
    dp = [[[0] * n for _ in range(m)] for _ in range(N + 1)]
    
    # Base case: Starting point
    dp[0][i][j] = 1  # There is 1 way to be at starting point at step 0
    
    # Define possible movements (right, left, down, up)
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    
    # Fill dp table for each step up to N
    for step in range(1, N + 1):
        for x in range(m):
            for y in range(n):
                for dx, dy in directions:
                    nx, ny = x + dx, y + dy
                    if nx < 0 or nx >= m or ny < 0 or ny >= n:
                        # If moving out of boundary, add the ways from the previous step
                        dp[step][x][y] += 1
                    else:
                        dp[step][x][y] += dp[step - 1][nx][ny]
    
    # The result is the number of ways to move out of boundary in exactly N steps from starting point
    return dp[N][i][j]

# Test cases
print(findPaths(2, 2, 2, 0, 0))  # Output: 6
print(findPaths(1, 3, 3, 0, 1))  # Output: 12
