from collections import defaultdict, deque
def minFuelCostToCapital(roads, seats):
    n = len(seats)
    if n == 1:
        return 0
    graph = defaultdict(list)
    for u, v in roads:
        graph[u].append(v)
        graph[v].append(u)
    max_seats = 0
    queue = deque([(0, seats[0])]) 
    visited = set([0])
    while queue:
        city, current_max_seats = queue.popleft()
        max_seats = max(max_seats, current_max_seats)

        for neighbor in graph[city]:
            if neighbor not in visited:
                visited.add(neighbor)
                next_max_seats = max(current_max_seats, seats[neighbor])
                queue.append((neighbor, next_max_seats))

    return max_seats
roads = [[0,1],[0,2],[0,3]]
seats = [5, 1, 2, 3]
print(minFuelCostToCapital(roads, seats))
