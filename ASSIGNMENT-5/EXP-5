def minimumCostToBuyApples(n, roads, appleCost, k):
    import heapq
    from collections import defaultdict
    graph = defaultdict(list)
    for u, v, cost in roads:
        graph[u].append((v, cost))
        graph[v].append((u, cost))
    def dijkstra(start):
        min_cost = [float('inf')] * (n + 1)
        min_cost[start] = 0
        priority_queue = [(0, start)]
        while priority_queue:
            current_cost, u = heapq.heappop(priority_queue)
            if current_cost > min_cost[u]:
                continue            
            for v, road_cost in graph[u]:
                cost_to_v = current_cost + road_cost
                if cost_to_v < min_cost[v]:
                    min_cost[v] = cost_to_v
                    heapq.heappush(priority_queue, (cost_to_v, v))
        return min_cost[1:]
    min_costs = []
    for start in range(1, n + 1):
        costs = dijkstra(start)
        min_costs.append(min(appleCost[i] + k * costs[i] for i in range(n)))
    return min_costs
n = 4
roads = [[1,2,4],[2,3,2],[2,4,5],[3,4,1],[1,3,4]]
appleCost = [56,42,102,301]
k = 2
print(minimumCostToBuyApples(n, roads, appleCost, k))
